// comb2fun.cpp : Defines the entry point for the console application.
//
// This code produces and saves the truth tables of the Boolean functions which are obtained from the Patterson-Wiedemann (PW) functions
// using all the combinations mentioned in the paper: 
// "S. Kavut. Improved cryptographic properties of Boolean functions obtained  from the neighbourhood of Patterson-Wiedemann functions". 
// Their cryptographic properties are also computed and classified.
// Note: It is required to have 2GB disk space to save all the functions.
//
//
// The code is compiled with Microsoft Visual C++ 2010.
//
// Written by Selçuk Kavut, Balikesir University, Turkey.
//

#include "stdafx.h"
#include "stdlib.h"

#define gn 2192		//Number of orbits for 15-variable RSBFs
#define mo 15		//Max. orbit size for 15-variable RSBFs
#define gn3 6560	//Number of orbits for 15-variable 3-RSBFs
#define mo3 5		//Max. orbit size for 15-variable 3-RSBFs
#define Zn 15		//Number of variables
#define Zm 32768	//Truth table length

//Orbit sizes for RSBFs
int SZ[]={};
//Orbit sizes for 3-RSBFs
int SZ3[]={1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5};

//Combinations giving balanced nonlinearity 16268 and absolute indicator 192 from the PW function with degree 8
int C8_3[168][4]={{99, 10203, 1084, 6931}, {966, 2236, 7387, 10974}, {5555, 7918, 14749, 6931}, {198, 20406, 271, 2459}, {559, 1932, 11749, 14774}, {11110, 14583, 6615, 2459}, {5287, 11611, 2226, 613}, {6142, 14588, 3434, 6772}, {739, 965, 7580, 10660}, {1883, 5050, 7354, 7890}, {3757, 10430, 1431, 5786}, {1834, 7803, 6908, 457}, {1930, 5780, 7638, 841}, {396, 8045, 4918, 542}, {483, 1118, 7015, 5487}, {3959, 6491, 4918, 7539}, {11693, 7333, 2849, 1226}, {12284, 3647, 6868, 1693}, {788, 5939, 2918, 2189}, {3366, 5463, 6454, 2918}, {3485, 10620, 7668, 3037}, {1478, 1895, 1930, 2665}, {3045, 7514, 11572, 2862}, {3766, 10100, 14708, 15780}, {1325, 6892, 19391, 3358}, {4059, 5431, 10550, 5218}, {1445, 3860, 15276, 1682}, {3668, 15606, 1727, 914}, {1723, 2650, 6015, 3853}, {7061, 8118, 4965, 2211}, {1266, 5587, 1591, 6358}, {2805, 5330, 1441, 1634}, {7124, 10070, 5819, 2657}, {2420, 15343, 9980, 10542}, {2452, 11115, 5349, 1113}, {3071, 7294, 3386, 1717}, {197, 6551, 2257, 5836}, {2655, 6970, 1917, 6074}, {4877, 10926, 4963, 5836}, {75, 5922, 10220, 4900}, {1449, 6870, 3853, 386}, {11756, 1917, 15270, 7333}, {2525, 3677, 3945, 7532}, {2956, 3790, 3860, 5330}, {5215, 11549, 2893, 5724}, {1046, 1388, 5807, 1107}, {1902, 5749, 6493, 14700}, {917, 20285, 3454, 1828}, {965, 2890, 3819, 3364}, {3446, 5300, 12030, 1679}, {9957, 16236, 2609, 5275}, {1253, 7131, 1591, 1682}, {15157, 3418, 3122, 1682}, {2506, 14262, 3364, 3182}, {6843, 3364, 6836, 6244}, {1781, 11047, 11638, 1107}, {2532, 11174, 3427, 3182}, {5610, 10660, 2099, 1069}, {300, 2961, 5110, 2450}, {3435, 5796, 3358, 193}, {7668, 7635, 5287, 5878}, {5012, 19949, 841, 6364}, {11187, 1709, 841, 1561}, {605, 15839, 2495, 4837}, {347, 2092, 11614, 2214}, {3675, 3804, 5587, 9629}, {633, 6493, 3179, 6364}, {2665, 10415, 817, 2138}, {3562, 5035, 2214, 15149}, {394, 6515, 1459, 3345}, {1683, 10981, 1459, 3227}, {5310, 7451, 12148, 3834}, {150, 2233, 2555, 1225}, {2898, 11619, 1679, 772}, {3834, 6621, 2939, 5349}, {523, 694, 12077, 2657}, {951, 7350, 10599, 11174}, {1210, 24055, 4990, 5271}, {1266, 3282, 2004, 2681}, {633, 1641, 1002, 10724}, {2532, 6564, 501, 5362}, {1003, 10430, 16180, 2325}, {1947, 5467, 5775, 10925}, {2006, 3045, 4045, 2697}, {3894, 10923, 10934, 11550}, {1343, 14687, 1380, 1362}, {3885, 6927, 10933, 11109}, {4012, 5215, 8090, 5394}, {919, 10099, 6931, 1284}, {5372, 11246, 690, 681}, {2686, 5623, 345, 2724}, {2109, 11549, 7675, 1453}, {14759, 2459, 1838, 321}, {1947, 3953, 20470, 2930}, {1947, 6258, 2893, 194}, {1614, 5035, 10413, 4876}, {6379, 14319, 3308, 9446}, {6142, 23486, 5487, 10094}, {1449, 7917, 6899, 1742}, {2797, 7547, 625, 1362}, {7354, 10934, 4079, 2715}, {1050, 1127, 2874, 625}, {11767, 3563, 1703, 7091}, {113, 1484, 23471, 5434}, {2961, 14316, 11767, 6383}, {3946, 14583, 4990, 6908}, {538, 5493, 7126, 15270}, {2100, 2254, 5748, 1250}, {7420, 7126, 5005, 2441}, {977, 3757, 15350, 2906}, {1018, 1484, 9532, 1838}, {1590, 3722, 9957, 10926}, {2841, 3763, 1519, 4909}, {6775, 3676, 4918, 642}, {1161, 1388, 11743, 3439}, {1388, 7482, 829, 1497}, {1827, 3894, 388, 5786}, {3894, 7906, 8173, 5860}, {3228, 10070, 2773, 1219}, {3763, 15807, 827, 6439}, {12284, 14205, 14119, 10974}, {3677, 5467, 16316, 6933}, {5796, 20342, 6575, 871}, {11188, 12135, 2087, 681}, {2898, 10171, 12083, 3484}, {5594, 15094, 2724, 1250}, {11109, 14708, 8158, 5430}, {2762, 5300, 7827, 10605}, {5300, 5594, 6293, 6847}, {23534, 7126, 3406, 14182}, {1954, 7514, 16231, 5812}, {226, 371, 14175, 7445}, {3579, 5922, 23534, 3827}, {3959, 7892, 1727, 9980}, {14319, 19967, 2918, 14060}, {347, 2322, 23486, 6878}, {347, 7453, 1658, 2994}, {525, 3297, 2087, 1437}, {1076, 9565, 6621, 14252}, {1855, 14252, 9443, 4882}, {371, 2036, 3676, 2383}, {3180, 5431, 7444, 10981}, {3211, 7526, 3038, 5779}, {7167, 15807, 3515, 5836}, {509, 742, 919, 4766}, {795, 1861, 5463, 7061}, {6379, 6422, 6076, 11558}, {14334, 23543, 1459, 7030}, {795, 2673, 3437, 5052}, {1325, 2387, 11188, 11251}, {1325, 5524, 5845, 15654}, {694, 2313, 14205, 11747}, {694, 3741, 3316, 5988}, {2295, 6927, 10235, 1465}, {3129, 6927, 11572, 97}, {2215, 2526, 3180, 11683}, {14301, 6587, 14252, 6812}, {807, 11047, 5546, 2438}, {7526, 23543, 1654, 4723}, {3071, 11749, 11743, 5047}, {1263, 1590, 5346, 6874}, {452, 742, 12215, 2717}, {1973, 7918, 2495, 3454}, {2233, 7158, 7654, 14301}, {269, 10583, 3563, 7635}, {3710, 3563, 3367, 2323}, {1381, 2650, 4925, 9653}, {2650, 2797, 4774, 16181}};
//Combinations giving balanced nonlinearity 16268 and absolute indicator 192 from the PW function with degree 9
int C9_3[84][4]={{547, 1314, 8085, 138}, {5971, 12132, 2002, 7067}, {15167, 2748, 5079, 14564}, {1094, 2089, 10213, 276}, {3033, 10647, 4004, 14134}, {8123, 3641, 687, 10158}, {1649, 5370, 7443, 1710}, {657, 2188, 5439, 69}, {6066, 6517, 1001, 6967}, {16246, 14653, 7282, 1374}, {804, 7858, 7831, 859}, {2251, 3831, 6315, 1812}, {3298, 10740, 3420, 2461}, {1450, 11556, 24511, 1082}, {1463, 3143, 4858, 14781}, {2173, 11671, 6894, 787}, {2028, 6327, 7419, 10740}, {3365, 9381, 9951, 19838}, {201, 15716, 1718, 15662}, {3249, 7662, 453, 2739}, {2151, 2685, 4922, 855}, {402, 1020, 7860, 20415}, {2889, 2900, 16255, 2164}, {2926, 6286, 7127, 9716}, {12003, 2001, 19373, 1574}, {507, 2685, 2931, 14838}, {4749, 5413, 6909, 19902}, {349, 1805, 16255, 1261}, {402, 3929, 5949, 3436}, {6498, 14575, 5478, 906}, {255, 804, 1965, 8063}, {201, 510, 3930, 16126}, {725, 5778, 16319, 541}, {2275, 2429, 5852, 14254}, {4002, 3447, 3148, 5979}, {1014, 5370, 5862, 8039}, {4757, 7037, 9379, 9919}, {1235, 2516, 16228, 5940}, {3238, 12013, 637, 758}, {3989, 6500, 8125, 6934}, {698, 1671, 16319, 2522}, {1396, 3342, 24511, 5044}, {1258, 4940, 8114, 2970}, {1619, 15285, 2548, 379}, {3250, 5407, 15679, 3467}, {629, 2470, 4057, 1485}, {1625, 7978, 10223, 2843}, {6245, 11195, 1516, 1274}, {3555, 14237, 6949, 35}, {209, 4786, 2991, 3289}, {771, 6885, 4058, 14695}, {5397, 16374, 14317, 9963}, {3183, 11751, 70, 4763}, {387, 5335, 8116, 5751}, {418, 9572, 6578, 5982}, {2709, 20477, 11771, 11575}, {6366, 7535, 9526, 140}, {774, 10670, 2029, 11502}, {836, 2393, 11964, 6947}, {5418, 8187, 23542, 7085}, {4052, 7988, 11007, 14654}, {1001, 964, 1972, 14245}, {169, 6484, 5054, 19247}, {2261, 10555, 12219, 398}, {1013, 1997, 12277, 5095}, {15679, 15341, 431, 1347}, {493, 5565, 2002, 241}, {676, 3242, 11454, 2527}, {6818, 9453, 15199, 199}, {2021, 9572, 4796, 10491}, {338, 1621, 10108, 5727}, {3409, 5045, 23983, 796}, {2026, 3994, 11261, 7327}, {135, 7382, 3065, 11111}, {8125, 12027, 2694, 862}, {540, 3691, 12260, 11677}, {1045, 12063, 12219, 5326}, {4004, 482, 986, 9583}, {2393, 4042, 4021, 1199}, {270, 14764, 6130, 7515}, {24054, 10223, 1724, 5388}, {673, 8030, 15199, 2663}, {2090, 4015, 23983, 10652}, {4786, 8084, 8042, 2398}};
//Combinations giving balanced nonlinearity 16266 and absolute indicator 192 from the PW function with degree 8
int C8_2[3][2]={{1057, 3279}, {1965, 11627}, {1457, 7399}};
//Combinations giving balanced nonlinearity 16272 from the PW function with degree 8
int C8_1[15][4]={{0, 9, 65, 585}, {0, 27, 195, 1755}, {0, 315, 2275, 8183}, {0, 469, 3965, 4797}, {0, 621, 657, 1611}, {621, 657, 1611, 14043}, {0, 765, 2709, 3951}, {0, 863, 5077, 6567}, {0, 931, 2907, 7867}, {0, 1323, 3691, 6653}, {0, 1467, 1589, 7535}, {0, 1661, 3231, 5483}, {0, 1701, 3431, 6131}, {0, 1997, 3817, 5581}, {0, 2549, 3259, 3915}};
//Combinations giving balanced nonlinearity 16272 from the PW function with degree 9
int C9_1[2][4]={{0, 931, 2907, 7867}, {0, 1661, 3231, 5483}};
int wb,ck,A[Zn],kz,c8=0,c9=0;

 
int RTA[2][2192]={
//PW func. with degree 8 (in the form of rotation-symmetric truth table)
{0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,1,0,1,0,1,1,0,0,0,1,1,1,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1,1,0,1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,0,1,1,1,0,1,0,0,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,0,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0,0,0,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,1,1,0,0,1,0,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,1,1,1,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,1,1,0,1,1,1,0,0,1,0,0,1,1,1,1,0,0,1,0,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,0,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,1,0,0,1,0,1,1,1,0,1,1,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,0,1,0,1,1,1,0,1,1,0,1,0,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,1,1,0,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,0,1,0,1,1,0,1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,1,1,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,0,0,1,1,0,1,0,1,0,1,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,0,0,0,1,1,0,1,1,0,1,0,0,1,1,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,1,0,0,1,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,0,1,1,0,0,0,1,1,0,1,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,0,0,0,1,1,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,0,0,1,1,1,1,0,1,1,0,1,0,0,1,0,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,1,1,1,0,1,0,0,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,1,1,1,0,0,1,1,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,1,1,0},
//PW func. with degree 9 (in the form of rotation-symmetric truth table)
{0,1,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,0,1,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,1,0,1,0,0,1,1,1,1,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,1,0,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,0,1,0,1,0,1,1,0,1,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0,1,0,1,1,1,0,0,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,0,0,1,0,1,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1,0,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,1,0,0,0,1,1,1,0,1,0,1,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,0,1,0,1,1,0,0,0,1,0,1,1,0,1,1,0,1,1,1,1,0,0,1,0,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,0,1,0,1,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,1,1,1,1,0,0,1,0,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,0,1,1,1,1,1,0,1,0,0,1,0,1,1,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,0,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,1,0,1,1,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,0,0,1,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,1,1,1,0,1,0,1,0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,1,0,1,0,0,0,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,1,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,1,0,1,0,0,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,1,0,0,0,1,0,0,1,0,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,0,1,1,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,0,1,1,0,0,1,0,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,0,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,0,0,0,1,0,1,0,0,1,1,1,0,1,0,1,1,0,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,0,1,1,1,1,0,1,0,1,0,0,0,0,1,0,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,0,0,0,0,1,0,1,1}};

int *Tres=(int *)malloc(Zm*sizeof(int));		//Truth table of 1-resilient function
int *DB=(int *)malloc(Zm*Zn*sizeof(int));		//Binary representations of decimal numbers (from 0 to 2^{15}-1)
int *ZRS=(int *)malloc(Zm*sizeof(int));			//Zeros in the Walsh spectrum
int *T=(int *)malloc((Zm+1)*sizeof(int));		//Algebraic nornal form
int *TT=(int *)malloc(Zm*sizeof(int));			//Truth table
int *FW=(int *)malloc(Zm*sizeof(int));			//Walsh transform
int *BS=(int *)malloc((Zm+1)*sizeof(int));		//Hamminf weights of binary vectors of length 15
int *Rd=(int *)malloc(gn*mo*sizeof(int));		//The orbits in 'Reprs15.txt'
int *Rd3=(int *)malloc(gn3*mo3*sizeof(int));	//The orbits in 'Reprs15_3.txt'
int *RT=(int *)malloc(gn*sizeof(int));			//Rotation-symmetric truth table
int *u=(int *)malloc((Zm+1)*sizeof(int));		//Used to find ANF
int *t=(int *)malloc((Zm+1)*sizeof(int));		//Used to find ANF

int *C8=(int *)malloc(15000*4*sizeof(int));		//The combinations in 'Combinations_d8.txt'
int *C9=(int *)malloc(15000*4*sizeof(int));		//The combinations in 'Combinations_d9.txt'

FILE *out1=fopen("Reprs15.txt", "r");			//Orbits for RSBFs
FILE *out3=fopen("Reprs15_3.txt", "r");			//Orbits for 3-RSBFs
FILE *out8=fopen("Combinations_d8.txt","r");	//Combinations giving 1-resilient functions with nonlinearity 16264 from the PW function with degree 8
FILE *out9=fopen("Combinations_d9.txt","r");	//Combinations giving 1-resilient functions with nonlinearity 16264 from the PW function with degree 9

FILE *outr=fopen("Stats.txt","w");				//Counter used to classify the results in terms of absolute indicator and algebraic degree
FILE *outr8=fopen("d8_16264_res.txt", "w");		//1-resilient functions with nonlinearity 16264 obtained from the PW function with degree 8
FILE *outr9=fopen("d9_16264_res.txt", "w");		//1-resilient functions with nonlinearity 16264 obtained from the PW function with degree 9
FILE *outr8_1=fopen("d8_16272_bal.txt", "w");	//Balanced functions with nonlinearity 16272 obtained from the PW function with degree 8 
FILE *outr9_1=fopen("d9_16272_bal.txt", "w");	//Balanced functions with nonlinearity 16272 obtained from the PW function with degree 9 
FILE *outr8_2=fopen("d8_16266_192.txt", "w");	//Balanced functions with nonlinearity 16266 and absolute indicator 192 obtained from the PW function with degree 8
FILE *outr8_3=fopen("d8_16268_192.txt", "w");	//Balanced functions with nonlinearity 16268 and absolute indicator 192 obtained from the PW function with degree 8
FILE *outr9_3=fopen("d9_16268_192.txt", "w");	//Balanced functions with nonlinearity 16268 and absolute indicator 192 obtained from the PW function with degree 9

int _tmain(int argc, _TCHAR* argv[])
{
	int make_res(int d, int NL, int acx, int zw,  int wr);	//Converts a Boolean function to its 1-resilient version by applying corresponding affine transformation
	int chk_res();	//Checks whether a Boolean function is affinely transformable to a 1-resilient function
	int conv_bal(int d, int NL, int acx, int zw); //Converts a Boolean function to its balanced version
	int anf(int *TT);	//Finds algebraic degree
	int acor(int *FW);	//Finds absolute indicator
	void fastwh(int *FW, int *TTs);	//Computes Walsh spectrum in integer format
	int findmax(int *tt); 	//Finds max. absolute value
	void fastwhld(long double *FW, long double *TTs); //Computes Walsh spectrum in long double format
	int rnk_cnt();	//Finds rank of the zero set given by ZRS

	int x,i,j,k,d,NL,acx,I,zw,j6=0,j7=0,j7r=0,j6r=0,STA[16][513],wr;

// STA: Used to classify our results in terms of absolute indicator and algebraic degree
	for (i=0;i<16;i++)
		for (j=0;j<513;j++)
			STA[i][j]=0;

// DB: Binary vectors corresponding to integers (from 0 to 2^{15}-1)
	for (i=0;i<Zm;i++)
		for (j=0;j<Zn;j++)
			DB[i*Zn+j]=(i&(1<<(Zn-1-j)))>>(Zn-1-j);

// BS: Hamming weights of binary vectors
	for (i=0;i<Zm;i++)
	{
		k=0;
		for (j=0;j<Zn;j++)
			k=k+((i&(1<<((Zn-1)-j)))>>((Zn-1)-j));
		BS[i]=k;
	}

// Rd: Contains all the orbits for RSBFs
	i=0;
	while (!feof(out1))
	{
		fscanf(out1,"%d ",&x);
		Rd[i]=x;
		i=i+1;
	}
	fclose(out1);

// Rd3: Contains all the orbits for 3-RSBFs
	i=0;
	while (!feof(out3))
	{
		fscanf(out3,"%d ",&x);
		Rd3[i]=x;
		i=i+1;
	}
	fclose(out3);

	for (i=0;i<16;i++)
		for (j=0;j<513;j++)
			STA[i][j]=0;

	fprintf(outr8_3,"\n***Results for balanced functions with nonlinearity 16268 and absolute indicator 192***");
	fprintf(outr8_3,"\nThere are 168 combinations for the PW function with degree 8.");
	for (I=0;I<168;I++)
	{
		for (i=0;i<gn;i++)
			RT[i]=RTA[0][i];
		for (i=0;i<gn;i++)
			for (j=0;j<SZ[i];j++)
				TT[Rd[i*mo+j]]=RT[i];	//TT is the PW function with degree 8.
		for (i=0;i<gn3;i++)
			if (Rd3[i*mo3]==C8_3[I][0] || Rd3[i*mo3]==C8_3[I][1] || Rd3[i*mo3]==C8_3[I][2] || Rd3[i*mo3]==C8_3[I][3])
				for (j=0;j<SZ3[i];j++)
					TT[Rd3[i*mo3+j]]=TT[Rd3[i*mo3+j]]^1; // The outputs of TT are toggled (corresponding to a four-orbit combination given by the array C8_3)
		d=anf(TT);	//d: Algebraic degree
		for (i=0;i<Zm;i++)
			TT[i]=1-2*TT[i];
		fastwh(FW,TT);
		zw=0;		//zw: # of zeros in the Walsh spectrum
		for (i=0;i<Zm;i++)
			if (FW[i]==0)
				zw=zw+1;
		NL=Zm/2-findmax(FW)/2; // NL: Nonlinearity
		acx=acor(FW);	//acx: Absolute indicator
		if (conv_bal(d,NL,acx,zw)==0)	//conv_bal: Makes TT balanced
		{
			fprintf(outr8_3,"\nFunction #: %d with NL=%d AC=%d d=%d for combination: (%d, %d, %d, %d);\n",I,NL,acx,d,C8_3[I][0],C8_3[I][1],C8_3[I][2],C8_3[I][3]);
			for (i=0;i<Zm-1;i++)
				fprintf(outr8_3,"%d,",(1-TT[i])/2);
			fprintf(outr8_3,"%d ",(1-TT[Zm-1])/2);			
			STA[d][acx/8]=STA[d][acx/8]+1;
		}
		else
		{
			printf("\nError...NL=16268 Delta=192");
			return 0;
		}
	}
	fclose(outr8_3);
	printf("\nBalanced functions with nonlinearity 16268 and absolute indicator 192 obtained from the PW function with degree 8 are saved to 'd8_16268_192.txt'.");


	fprintf(outr9_3,"\n***Results for balanced functions with nonlinearity 16268 and absolute indicator 192***");
	fprintf(outr9_3,"\nThere are 84 combinations for the PW function with degree 9.");
	for (I=0;I<84;I++)
	{
		for (i=0;i<gn;i++)
			RT[i]=RTA[1][i];
		for (i=0;i<gn;i++)
			for (j=0;j<SZ[i];j++)
				TT[Rd[i*mo+j]]=RT[i];	//TT is the PW function with degree 9.
		for (i=0;i<gn3;i++)
			if (Rd3[i*mo3]==C9_3[I][0] || Rd3[i*mo3]==C9_3[I][1] || Rd3[i*mo3]==C9_3[I][2] || Rd3[i*mo3]==C9_3[I][3])
				for (j=0;j<SZ3[i];j++)
					TT[Rd3[i*mo3+j]]=TT[Rd3[i*mo3+j]]^1;
		d=anf(TT);
		for (i=0;i<Zm;i++)
			TT[i]=1-2*TT[i];
		fastwh(FW,TT);
		zw=0;
		for (i=0;i<Zm;i++)
			if (FW[i]==0)
				zw=zw+1;
		NL=Zm/2-findmax(FW)/2;
		acx=acor(FW);
		if (conv_bal(d,NL,acx,zw)==0)
		{
			fprintf(outr9_3,"\nFunction #: %d with NL=%d AC=%d d=%d for combination: (%d, %d, %d, %d);\n",I,NL,acx,d,C9_3[I][0],C9_3[I][1],C9_3[I][2],C9_3[I][3]);
			for (i=0;i<Zm-1;i++)
				fprintf(outr9_3,"%d,",(1-TT[i])/2);
			fprintf(outr9_3,"%d ",(1-TT[Zm-1])/2);			
			STA[d][acx/8]=STA[d][acx/8]+1;
		}
		else
		{
			printf("\nError...NL=16268 Delta=192");
			return 0;
		}
	}
	fclose(outr9_3);
	fprintf(outr,"\nClassification of balanced functions with nonlinearity 16268 and absolute indicator 192:");
	for (i=0;i<16;i++)
		for (j=0;j<513;j++)
			if (STA[i][j]!=0)
				fprintf(outr,"\nAbsolute Indicator=%d Degree=%d => %d",j*8,i,STA[i][j]);
	printf("\nBalanced functions with nonlinearity 16268 and absolute indicator 192 obtained from the PW function with degree 9 are saved to 'd9_16268_192.txt'.");

	for (i=0;i<16;i++)
		for (j=0;j<513;j++)
			STA[i][j]=0;

	fprintf(outr8_2,"\n***Results for balanced functions with nonlinearity 16266 and absolute indicator 192***");
	fprintf(outr8_2,"\nThere are 3 combinations for the PW function with degree 8.");
	for (I=0;I<3;I++)
	{
		for (i=0;i<gn;i++)
			RT[i]=RTA[0][i];
		for (i=0;i<gn;i++)
			for (j=0;j<mo;j++)
				if (Rd[i*mo+j]==C8_2[I][0] || Rd[i*mo+j]==C8_2[I][1])
					RT[i]=RT[i]^1;
		for (i=0;i<gn;i++)
			for (j=0;j<SZ[i];j++)
				TT[Rd[i*mo+j]]=RT[i];
		d=anf(TT);
		for (i=0;i<Zm;i++)
			TT[i]=1-2*TT[i];
		fastwh(FW,TT);
		zw=0;
		for (i=0;i<Zm;i++)
			if (FW[i]==0)
				zw=zw+1;
		NL=Zm/2-findmax(FW)/2;
		acx=acor(FW);
		if (conv_bal(d,NL,acx,zw)==0)
		{
			fprintf(outr8_2,"\nFunction #: %d with NL=%d AC=%d d=%d for combination: (%d, %d);\n",I,NL,acx,d,C8_2[I][0],C8_2[I][1]);
			for (i=0;i<Zm-1;i++)
				fprintf(outr8_2,"%d,",(1-TT[i])/2);
			fprintf(outr8_2,"%d ",(1-TT[Zm-1])/2);			
			STA[d][acx/8]=STA[d][acx/8]+1;
		}
		else
		{
			printf("\nError...NL=16266 Delta=192");
			return 0;
		}
	}
	fclose(outr8_2);
	fprintf(outr,"\nClassification of balanced functions with nonlinearity 16266 and absolute indicator 192:");
	for (i=0;i<16;i++)
		for (j=0;j<513;j++)
			if (STA[i][j]!=0)
				fprintf(outr,"\nAbsolute Indicator=%d Degree=%d => %d",j*8,i,STA[i][j]);
	printf("\nBalanced functions with nonlinearity 16266 and absolute indicator 192 obtained from the PW function with degree 8 are saved to 'd8_16266_192.txt'.");

	for (i=0;i<16;i++)
		for (j=0;j<513;j++)
			STA[i][j]=0;
	fprintf(outr8_1,"\n***Results for balanced functions with nonlinearity 16272***");
	fprintf(outr8_1,"\nThere are 15 combinations for the PW function with degree 8.");
	for (I=0;I<15;I++)
	{
		for (i=0;i<gn;i++)
			RT[i]=RTA[0][i];
		for (i=0;i<gn;i++)
			for (j=0;j<mo;j++)
				if (Rd[i*mo+j]==C8_1[I][0] || Rd[i*mo+j]==C8_1[I][1] || Rd[i*mo+j]==C8_1[I][2] || Rd[i*mo+j]==C8_1[I][3])
					RT[i]=RT[i]^1;
		for (i=0;i<gn;i++)
			for (j=0;j<SZ[i];j++)
				TT[Rd[i*mo+j]]=RT[i];
		d=anf(TT);
		for (i=0;i<Zm;i++)
			TT[i]=1-2*TT[i];
		fastwh(FW,TT);
		zw=0;
		for (i=0;i<Zm;i++)
			if (FW[i]==0)
				zw=zw+1;
		NL=Zm/2-findmax(FW)/2;
		acx=acor(FW);
		if (conv_bal(d,NL,acx,zw)==0)
		{
			fprintf(outr8_1,"\nFunction #: %d with NL=%d AC=%d d=%d for combination: (%d, %d, %d, %d);\n",I,NL,acx,d,C8_1[I][0],C8_1[I][1],C8_1[I][2],C8_1[I][3]);
			for (i=0;i<Zm-1;i++)
				fprintf(outr8_1,"%d,",(1-TT[i])/2);
			fprintf(outr8_1,"%d ",(1-TT[Zm-1])/2);			
			STA[d][acx/8]=STA[d][acx/8]+1;
		}
		else
		{
			printf("\nError..balanced");
			return 0;
		}
	}
	fclose(outr8_1);
	printf("\nBalanced functions with nonlinearity 16272 obtained from the PW function with degree 8 are saved to 'd8_16272_bal.txt'.");

	fprintf(outr9_1,"\n***Results for balanced functions with nonlinearity 16272***");
	fprintf(outr9_1,"\nThere are 2 combinations for the PW function with degree 9.");
	for (I=0;I<2;I++)
	{
		for (i=0;i<gn;i++)
			RT[i]=RTA[1][i];
		for (i=0;i<gn;i++)
			for (j=0;j<mo;j++)
				if (Rd[i*mo+j]==C9_1[I][0] || Rd[i*mo+j]==C9_1[I][1] || Rd[i*mo+j]==C9_1[I][2] || Rd[i*mo+j]==C9_1[I][3])
					RT[i]=RT[i]^1;
		for (i=0;i<gn;i++)
			for (j=0;j<SZ[i];j++)
				TT[Rd[i*mo+j]]=RT[i];
		d=anf(TT);
		for (i=0;i<Zm;i++)
			TT[i]=1-2*TT[i];
		fastwh(FW,TT);
		zw=0;
		for (i=0;i<Zm;i++)
			if (FW[i]==0)
				zw=zw+1;
		NL=Zm/2-findmax(FW)/2;
		acx=acor(FW);
		if (conv_bal(d,NL,acx,zw)==0)
		{
			fprintf(outr9_1,"\nFunction #: %d with NL=%d AC=%d d=%d for combination: (%d, %d, %d, %d);\n",I,NL,acx,d,C9_1[I][0],C9_1[I][1],C9_1[I][2],C9_1[I][3]);
			for (i=0;i<Zm-1;i++)
				fprintf(outr9_1,"%d,",(1-TT[i])/2);
			fprintf(outr9_1,"%d ",(1-TT[Zm-1])/2);			
			STA[d][acx/8]=STA[d][acx/8]+1;
		}
		else
		{
			printf("\nError...balanced");
			return 0;
		}
	}
	fclose(outr9_1);
	fprintf(outr,"\nClassification of balanced functions with nonlinearity 16272:");
	for (i=0;i<16;i++)
		for (j=0;j<513;j++)
			if (STA[i][j]!=0)
				fprintf(outr,"\nAbsolute Indicator=%d Degree=%d => %d",j*8,i,STA[i][j]);
	printf("\nBalanced functions with nonlinearity 16272 obtained from the PW function with degree 9 are saved to 'd8_16272_bal.txt'.");

	for (i=0;i<16;i++)
		for (j=0;j<513;j++)
			STA[i][j]=0;

	c8=0;
	while (!feof(out8))
	{
		fscanf(out8,"%d ",&x);
		C8[c8]=x;
		c8=c8+1;
	}
	fclose(out8);
	
	fprintf(outr8_1,"\n***Results for 1-resilient functions with nonlinearity 16264***");
	fprintf(outr8,"\nThere are %d combinations for the PW function with degree 8.",c8/4);
	for (I=0;I<c8/4;I++)
	{
		for (i=0;i<gn;i++)
			RT[i]=RTA[0][i];
		for (i=0;i<gn;i++)
			for (j=0;j<mo;j++)
			if (Rd[i*mo+j]==C8[I*4] || Rd[i*mo+j]==C8[I*4+1] || Rd[i*mo+j]==C8[I*4+2] || Rd[i*mo+j]==C8[I*4+3])
				RT[i]=RT[i]^1;

			for (i=0;i<gn;i++)
				for (j=0;j<SZ[i];j++)
					TT[Rd[i*mo+j]]=RT[i];
		d=anf(TT);
		for (i=0;i<Zm;i++)
			TT[i]=1-2*TT[i];
		fastwh(FW,TT);
		NL=Zm/2-findmax(FW)/2;
		if (16264!=NL)
		{
			printf("\nError...NL=%d",NL);
			return 0;
		}
		acx=acor(FW);
		if (acx>512*8)
			printf("\nError...AC");

		wr=chk_res();	//chk_res: Checks whether TT is affinely transformable to a 1-resilient function
		if (wr==-1)
		{
			printf("\nError..resiliency");
			return 0;
		}
		
		zw=0;
		for (i=0;i<Zm;i++)
			if (FW[i]==0)
				zw=zw+1;

		if (make_res(d,NL,acx,zw,wr)==1)	//make_res: Makes TT 1-resilient
		{
			printf("\nError...resiliency");
			return 0;
		}
		fprintf(outr8,"\nFunction #: %d with NL=%d AC=%d d=%d for combination: (%d, %d, %d, %d);\n",I,NL,acx,d,C8[I*4],C8[I*4+1],C8[I*4+2],C8[I*4+3]);
		for (i=0;i<Zm-1;i++)
			fprintf(outr8,"%d,",(1-TT[i])/2);
		fprintf(outr8,"%d ",(1-TT[Zm-1])/2);			

		STA[d][acx/8]=STA[d][acx/8]+1;
	}
	fclose(outr8);
	printf("\n1-resilient functions with nonlinearity 16264 obtained from the PW function with degree 8 are saved to 'd8_16264_res.txt'.");

	c9=0;
	while (!feof(out9))
	{
		fscanf(out9,"%d ",&x);
		C9[c9]=x;
		c9=c9+1;
	}
	fclose(out9);

	fprintf(outr8_1,"\n***Results for 1-resilient functions with nonlinearity 16264***");
	fprintf(outr9,"\nThere are %d combinations for the PW function with degree 9.",c9/4);
	for (I=0;I<c9/4;I++)
	{
		for (i=0;i<gn;i++)
			RT[i]=RTA[1][i];
		for (i=0;i<gn;i++)
			for (j=0;j<mo;j++)
			if (Rd[i*mo+j]==C9[I*4] || Rd[i*mo+j]==C9[I*4+1] || Rd[i*mo+j]==C9[I*4+2] || Rd[i*mo+j]==C9[I*4+3])
				RT[i]=RT[i]^1;

			for (i=0;i<gn;i++)
				for (j=0;j<SZ[i];j++)
					TT[Rd[i*mo+j]]=RT[i];
		d=anf(TT);
		for (i=0;i<Zm;i++)
			TT[i]=1-2*TT[i];
		fastwh(FW,TT);
		NL=Zm/2-findmax(FW)/2;
		if (16264!=NL)
		{
			printf("\nError...NL=%d",NL);
			return 0;
		}
		acx=acor(FW);
		if (acx>512*8)
			printf("\nError...AC");

		wr=chk_res();
		if (wr==-1)
		{
			printf("\nError..resiliency");
			return 0;
		}
		
		zw=0;
		for (i=0;i<Zm;i++)
			if (FW[i]==0)
				zw=zw+1;

		if (make_res(d,NL,acx,zw,wr)==1)
		{
			printf("\nError...resiliency");
			return 0;
		}
		fprintf(outr9,"\nFunction #: %d with NL=%d AC=%d d=%d for combination: (%d, %d, %d, %d);\n",I,NL,acx,d,C9[I*4],C9[I*4+1],C9[I*4+2],C9[I*4+3]);
		for (i=0;i<Zm-1;i++)
			fprintf(outr9,"%d,",(1-TT[i])/2);
		fprintf(outr9,"%d ",(1-TT[Zm-1])/2);			

		STA[d][acx/8]=STA[d][acx/8]+1;
	}
	fclose(outr9);

	fprintf(outr,"\nClassification of 1-resilient functions with nonlinearity 16264:");
	for (i=0;i<16;i++)
		for (j=0;j<513;j++)
			if (STA[i][j]!=0)
				fprintf(outr,"\nAbsolute Indicator=%d Degree=%d => %d",j*8,i,STA[i][j]);
	printf("\n1-resilient functions with nonlinearity 16264 obtained from the PW function with degree 9 are saved to 'd9_16264_res.txt'.");

	printf("Classifications of all the Boolean functions in terms of degree and absolute indicator are saved to 'Stats.txt'.");
	fclose(outr);
	return 0;
}

int anf(int *TT)	//Finds algebraic degree of TT
{
	int i,j,k,it,p,su,Maxi=0;
	for (i=0;i<Zm;i++)
		T[i]=TT[i];

	for (i=0;i<Zn;i++)
	{
		k=0;
		su=0;
		for (j=0;j<(1<<i);j++)
		{
			p=(1<<(Zn-i));
			for (it=k;it<k+p;it++)		t[it-k]=T[it];
			k=k+p;
			for (it=p/2;it<p;it++)		t[it]=t[it-p/2]^t[it];
			for (it=su;it<su+p;it++)	u[it]=t[it-su];
			su=su+p;
		}
		for (j=0;j<Zm;j++)
			T[j]=u[j];
	}

	for (i=0;i<Zm;i++)
		if (T[i]==1 && BS[i]>Maxi)
			Maxi=BS[i];

	return Maxi;
}

void fastwh(int *FW, int *TTs)	//Computes Walsh spectrum values in integer format
{	
	int i,j,i1,i2,i3,k1=2,k2=Zm/2,k3=1,L1,temp1,temp2;
	for (i=0;i<Zm;i++)
		FW[i]=TTs[i];
	for (i1=0;i1<Zn;i1++)  
	{
	   L1=1;
	   for (i2=0;i2<k2;i2++)
	   {
		  for (i3=0;i3<k3;i3++)
		  {
			 i=i3+L1-1; j=i+k3; 
		     temp1= FW[i]; temp2 = FW[j]; 
			 FW[i]=temp1+temp2;
		     FW[j]=temp1-temp2;
		  }
	      L1=L1+k1; 
	   }
	   k1=k1*2; k2=k2/2; k3=k3*2;
	}
}

void fastwhld(long double *FW, long double *TTs)	//Computes Walsh spectrum values in long double format
{	
	int i,j,i1,i2,i3,k1=2,k2=Zm/2,k3=1,L1;
	long double temp1,temp2;
	for (i=0;i<Zm;i++)
		FW[i]=TTs[i];
	for (i1=0;i1<Zn;i1++)  
	{
	   L1=1;
	   for (i2=0;i2<k2;i2++)
	   {
		  for (i3=0;i3<k3;i3++)
		  {
			 i=i3+L1-1; j=i+k3; 
		     temp1= FW[i]; temp2 = FW[j]; 
			 FW[i]=temp1+temp2;
		     FW[j]=temp1-temp2;
		  }
	      L1=L1+k1; 
	   }
	   k1=k1*2; k2=k2/2; k3=k3*2;
	}
}


int acor(int *FW)	//Computes absolute indicator 
{
	int i;
	long double *AC=(long double *)malloc(Zm*sizeof(long double));
	long double *ACt=(long double *)malloc(Zm*sizeof(long double));
	for (i=0;i<Zm;i++)
		ACt[i]=((long double) FW[i])*((long double) FW[i]);
	fastwhld(AC,ACt);

	long double D,Maxi=-1;
	for (i=1;i<Zm;i++)
	{
		D=AC[i];
		if (AC[i]<0)
			D=-AC[i];
		if (D>Maxi)
			Maxi=D;
	}
	free(AC);
	free(ACt);
	return ((int) (Maxi/Zm));
}

int findmax(int *tt)	// Finds maximum absolute value
{
	int i;
	int D,Maxi=-1;
	for (i=0;i<Zm;i++)
	{
		D=tt[i];
		if (tt[i]<0)
			D=-tt[i];
		if (D>Maxi)
			Maxi=D;
	}
	return Maxi;
}

int conv_bal(int d, int NL, int acx, int zw)	// Makes TT balanced
{
	int i,j=0,dx,zwx,NLx,acxx;
	for (i=0;i<Zm;i++)
		if (FW[i]==0)
		{
			wb=i;
			if (j==0)
				break;
			j=j+1;
		}
	for (i=0;i<Zm;i++)
		TT[i]=((1-TT[i])/2)^(BS[(wb&i)]%2);
	dx=anf(TT);
	for (i=0;i<Zm;i++)
		TT[i]=1-2*TT[i];
	fastwh(FW,TT);
	zwx=0;
	for (i=0;i<Zm;i++)
		if (FW[i]==0)
			zwx=zwx+1;
	NLx=Zm/2-findmax(FW)/2;
	acxx=acor(FW);
	if (NLx!=NL || acxx!=acx || zwx!=zw || dx!=d || FW[0]!=0)
	{
		printf("\nError NL=%d acx=%d zw=%d d=%d ; NLx=%d acxx=%d zwx=%d dx=%d",NL,acx,zw,d,NLx,acxx,zwx,dx);
		return 1;
	}
	return 0;
}


int rnk_cnt()	//Finds rank of the zero set given by ZRS
{
	int i,j,k,s,ct;

	ct=0;
	for (i=0;i<kz;i++)
	{
		if (ZRS[i]!=-1 && ZRS[i]!=0)
		{
			A[ct]=ZRS[i];
			ZRS[i]=-1;
			ct=ct+1;
			if (ct!=15)
				for (j=1;j<(1<<ct);j++)
				{
					s=0;
					for (k=0;k<ct;k++)
						if (((j&(1<<(ct-k-1)))>>(ct-k-1))!=0)
							s=s^A[k];
					for (k=0;k<kz;k++)
						if (s==ZRS[k])
						{
							ZRS[k]=-1;
							break;
						}
				}
			else
				break;
		}
	}
	return ct;
}

int chk_res() //Checks if the set of zeros in the Walsh spectrum is of full rank
{
	int I,i,ZRSt[gn],rk;
	kz=0;

	for (i=0;i<Zm;i++)
		if (FW[i]==0)
		{
			ZRS[kz]=i;
			kz=kz+1;
		}

	for (i=0;i<kz;i++)
		ZRSt[i]=ZRS[i];
	for (I=0;I<kz;I++)
	{
		for (i=0;i<kz;i++)
			ZRS[i]=ZRS[i]^ZRSt[I];
		rk=rnk_cnt();
		if (rk==15)
		{
			for (i=0;i<kz;i++)
				ZRS[i]=ZRSt[i];
			return ZRSt[I];
		}
	}
	for (i=0;i<kz;i++)
		ZRS[i]=ZRSt[i];
	return -1;
}

int make_res(int d, int NL, int acx, int zw, int wr) //Makes TT resilient
{
	int i,j,k,B[Zn][Zn],vt[Zn],dx,NLx,acxx,zwx,ro;
	int r1[]={16384,8192,4096,2048,1024,512,256,128,64,32,16,8,4,2,1};
	for (i=0;i<Zn;i++)
		for (j=0;j<Zn;j++)
			B[i][j]=DB[A[i]*Zn+j];
	for (i=0;i<Zm;i++)
		TT[i]=((1-TT[i])/2)^(BS[(wr&i)]%2);
	for (i=0;i<Zm;i++)
	{
		for (j=0;j<Zn;j++)
			vt[j]=(BS[i&A[j]]%2);
		k=0;
		for (j=0;j<Zn;j++)
			k=k^(vt[j]<<(Zn-j-1));
		Tres[k]=TT[i];

	}
	dx=anf(Tres);
	for (i=0;i<Zm;i++)
		TT[i]=1-2*Tres[i];
	fastwh(FW,TT);
	zwx=0;
	for (i=0;i<Zm;i++)
		if (FW[i]==0)
			zwx=zwx+1;
	NLx=Zm/2-findmax(FW)/2;
	acxx=acor(FW);
	ro=1;
	if (FW[0]!=0)
		ro=0;
	for (i=0;i<Zn;i++)
		if (FW[r1[i]]!=0)
			ro=0;
	if (NLx!=NL || acxx!=acx || zwx!=zw || dx!=d || ro!=1)
	{
		printf("\nError NL=%d acx=%d zw=%d d=%d ro=%d; NLx=%d acxx=%d zwx=%d dx=%d",NL,acx,zw,d,ro,NLx,acxx,zwx,dx,ro);
		return 1;
	}
	return 0;
}